services:
    discovery-service:
        image: z4l4n/discovery_service:1.0
        container_name: discovery-service-cont
        ports:
            - "8761:8761"
        networks:
            - ila
        environment:    
            - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888/
            - SPRING_APPLICATION_NAME=discovery-service
        depends_on:
            config-server:
                condition: service_healthy
    keycloak:
        image: quay.io/keycloak/keycloak:23.0.7
        container_name: keycloak-cont
        ports:
            - "8998:8080"
        networks:
            - ila
        environment:    
            - KEYCLOAK_ADMIN=admin
            - KEYCLOAK_ADMIN_PASSWORD=admin
        command: start-dev
    gateway-service:
        image: z4l4n/gateway:1.0
        container_name: gateway-service-cont
        ports:
            - "8885:8885"
        networks:
            - ila
        environment:    
            - SPRING_APPLICATION_NAME=gateway-service
            - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka
            - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI=http://keycloak:8080/realms/master/protocol/openid-connect/certs
        depends_on:
            config-server:
                condition: service_healthy
            duckdb:
                condition: service_healthy
    
    config-server:
        image: "z4l4n/config_server:1.0"
        container_name: "config_server_cont"
        healthcheck:
            test: curl --fail --silent localhost:8888/actuator/health/readiness | grep UP || exit 1
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s
            start_interval: 10s
        ports:
            - "8888:8888"
        networks:
            - ila
        environment:
            - SPRING_RABBITMQ_HOST=rabbit_mq
    
    duck:
        image: "z4l4n/duck_club:1.0"
        container_name: "duck_club_cont"
        ports:
            - "8081:8081"
        networks:
            - ila
        environment:    
            - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888/
            - SPRING_APPLICATION_NAME=duck
            - SPRING_PROFILES_ACTIVE=qa
            - SPRING_DATASOURCE_URL=jdbc:postgresql://duckdb:5432/duckdb
            - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka
        depends_on:
            config-server:
                condition: service_healthy
            duckdb:
                condition: service_healthy
                
    duckdb:
        image: postgres
        container_name: duckdb_c
        environment: 
            - POSTGRES_PASSWORD=pw
            - POSTGRES_USER=user
            - POSTGRES_DB=duckdb
        ports:
            - "5432:5432"
        healthcheck:
            test: ["CMD-SHELL", "pg_isready"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - ila
            
        
    chicken:
        image: "z4l4n/chicken_club:1.0"
        container_name: "chicken_club_cont"
        ports:
            - "8082:8082"
        networks:
            - ila
        environment:    
            - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888/
            - SPRING_APPLICATION_NAME=chickenclub
            - SPRING_PROFILES_ACTIVE=qa
            - SPRING_DATASOURCE_URL=jdbc:postgresql://chickendb:5432/chickdb
            - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka
        depends_on:
            config-server:
                condition: service_healthy
            chickendb:
                condition: service_healthy
                
    chickendb:
        image: postgres
        container_name: chickdb_c
        environment: 
            - POSTGRES_PASSWORD=pw
            - POSTGRES_USER=user
            - POSTGRES_DB=chickdb          
        healthcheck:
            test: ["CMD-SHELL", "pg_isready"]
            interval: 10s
            timeout: 5s
            retries: 5
        networks:
            - ila
    
    read:
        image: grafana/loki:2.9.2
        command: "-config.file=/etc/loki/config.yaml -target=read"
        ports:
          - 3101:3100
          - 7946
          - 9095
        volumes:
          - ./obs/loki-config.yaml:/etc/loki/config.yaml
        depends_on:
          - minio
        healthcheck:
          test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
          interval: 10s
          timeout: 5s
          retries: 5
        networks: &loki-dns
          ila:
            aliases:
              - loki

    write:
        image: grafana/loki:2.9.2
        command: "-config.file=/etc/loki/config.yaml -target=write"
        ports:
          - 3102:3100
          - 7946
          - 9095
        volumes:
          - ./obs/loki-config.yaml:/etc/loki/config.yaml
        healthcheck:
          test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
          interval: 10s
          timeout: 5s
          retries: 5
        depends_on:
          - minio
        networks:
          <<: *loki-dns

    promtail:
        image: grafana/promtail:2.9.2
        volumes:
          - ./obs/promtail-local-config.yaml:/etc/promtail/config.yaml:ro
          - /var/run/docker.sock:/var/run/docker.sock
        command: -config.file=/etc/promtail/config.yaml
        depends_on:
          - gateway
        networks:
          - ila

    minio:
        image: minio/minio
        entrypoint:
          - sh
          - -euc
          - |
            mkdir -p /data/loki-data && \
            mkdir -p /data/loki-ruler && \
            minio server /data
        environment:
          - MINIO_ROOT_USER=loki
          - MINIO_ROOT_PASSWORD=supersecret
          - MINIO_PROMETHEUS_AUTH_TYPE=public
          - MINIO_UPDATE=off
        ports:
          - 9000
        volumes:
          - ./obs/.data/minio:/data
        healthcheck:
          test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
          interval: 15s
          timeout: 20s
          retries: 5
        networks:
          - ila

    grafana:
        image: grafana/grafana:latest
        environment:
          - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
          - GF_AUTH_ANONYMOUS_ENABLED=true
          - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
        depends_on:
          - gateway
        entrypoint:
          - sh
          - -euc
          - |
            mkdir -p /etc/grafana/provisioning/datasources
            cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
            apiVersion: 1
            datasources:
              - name: Loki
                type: loki
                access: proxy
                url: http://gateway:3100
                jsonData:
                  httpHeaderName1: "X-Scope-OrgID"
                secureJsonData:
                  httpHeaderValue1: "tenant1"
              - name: Prometheus
                type: prometheus
                access: proxy
                url: http://prometheus:9090
            EOF
            /run.sh
        ports:
          - "3000:3000"
        healthcheck:
          test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
          interval: 10s
          timeout: 5s
          retries: 5
        networks:
          - ila

    gateway:
        image: nginx:latest
        depends_on:
          - read
          - write
        entrypoint:
          - sh
          - -euc
          - |
            cat <<EOF > /etc/nginx/nginx.conf
            user  nginx;
            worker_processes  5;  ## Default: 1

            events {
              worker_connections   1000;
            }

            http {
              resolver 127.0.0.11;

              server {
                listen             3100;

                location = / {
                  return 200 'OK';
                  auth_basic off;
                }

                location = /api/prom/push {
                  proxy_pass       http://write:3100\$$request_uri;
                }

                location = /api/prom/tail {
                  proxy_pass       http://read:3100\$$request_uri;
                  proxy_set_header Upgrade \$$http_upgrade;
                  proxy_set_header Connection "upgrade";
                }

                location ~ /api/prom/.* {
                  proxy_pass       http://read:3100\$$request_uri;
                }

                location = /loki/api/v1/push {
                  proxy_pass       http://write:3100\$$request_uri;
                }

                location = /loki/api/v1/tail {
                  proxy_pass       http://read:3100\$$request_uri;
                  proxy_set_header Upgrade \$$http_upgrade;
                  proxy_set_header Connection "upgrade";
                }

                location ~ /loki/api/.* {
                  proxy_pass       http://read:3100\$$request_uri;
                }
              }
            }
            EOF
            /docker-entrypoint.sh nginx -g "daemon off;"
        ports:
          - "3100:3100"
        healthcheck:
          test: ["CMD", "service", "nginx", "status"]
          interval: 10s
          timeout: 5s
          retries: 5
        networks:
          - ila

    prometheus:
        image: prom/prometheus
        ports:
          - "9090:9090"
        volumes:
          - ./obs/prometheus.yml:/etc/prometheus/prometheus.yml
        networks:
          - ila
    
    
    
networks:
    ila:
        driver: bridge